var documenterSearchIndex = {"docs":
[{"location":"lib/lib/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"lib/lib/#Contents","page":"Library","title":"Contents","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"Pages = [\"lib.md\"]\nDepth = 4","category":"page"},{"location":"lib/lib/#Functions","page":"Library","title":"Functions","text":"","category":"section"},{"location":"lib/lib/#Index","page":"Library","title":"Index","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"Pages = [\"lib.md\"]","category":"page"},{"location":"lib/lib/#General-functions","page":"Library","title":"General functions","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"VTUHeader\nVTUFileHandler.VTUDataField\nVTUFileHandler.VTUData\nVTUFile","category":"page"},{"location":"lib/lib/#VTUFileHandler.VTUHeader","page":"Library","title":"VTUFileHandler.VTUHeader","text":"VTUHeader(::Type{T},input::Vector{UInt8}) where {T<:Union{UInt32,UInt64}}\n\nComputes the VTUHeader based on the headertype and a Base64 decoded input data array.\n\nConstructor\n\n::Type{T}: headertype, either UInt32 or UInt64\ninput::Vector{UInt8}: input data\n\nFields\n\nnum_blocks::T : number of blocks\nblocksize::T : size of blocks\nlast_blocksize::T : size of last block (can be different)\ncompressed_blocksizes::T : size of compressed blocks\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#VTUFileHandler.VTUDataField","page":"Library","title":"VTUFileHandler.VTUDataField","text":"VTUDataField(x::Vector{T}) where {T} = new{T}(x)\n\nContainer for VTU field data.\n\nConstructor\n\nx::Vector{T}: Vector with VTU field data\n\nFields\n\ndat::Vector{T} : VTU field data\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#VTUFileHandler.VTUData","page":"Library","title":"VTUFileHandler.VTUData","text":"VTUData(dataarrays::Vector{XMLElement},appendeddata::Vector{XMLElement},headertype::Union{Type{UInt32},Type{UInt64}},offsets::Vector{Int},compressed_dat::Bool)\n\nContainer for VTU data.\n\nConstructor\n\ndataarrays::Vector{XMLElement}: Vector with all XML elements with tag DataArray of VTU file\nappendeddata::Vector{XMLElement}: Vector with all XML elements with tag AppendedData\nheadertype::Union{Type{UInt32},Type{UInt64}} : Type of VTU header\noffsets::Vector{Int} : Offset of each field data in the compressed appended data \ncompressed_dat::Bool : True if data is compressed\n\nFields\n\nnames::Vector{String} : Name of each data field\nheader::Vector{VTUHeader} : Vector with VTUHeaders.\ndata::Vector{VTUDataField} : Vector with VTUDataFields\ninterp_data::Vector{VTUDataField{Float64}} : Vector with VTUDataFields\nidat::Vector{Int} : Vector indexing the data-fields onto which the math operators should be applied\n\nFor a VTUDataField to appear in data, the appropriate keyword has to be added via add_uncompress_keywords or add_interpolation_keywords.  For a VTUDataField to appear in interp_data the appropriate keyword has to be added via add_interpolation_keywords. For more information, see VTUKeyWords.\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#VTUFileHandler.VTUFile","page":"Library","title":"VTUFileHandler.VTUFile","text":"VTUFile(name::String)\n\nLoads a VTU file. Don't forget to set the proper fieldnames via set_uncompress_keywords and set_interpolation_keywords.\n\nConstructor\n\nname::String: path to vtu file\n\nFields\n\nname::String: path to vtu file; destination for file writing\nxmlroot::XMLElement: VTU file in XML represantation\ndataarrays::Vector{XMLElement}: Vector with all XML elements with tag DataArray of VTU file\nheadertype::Union{Type{UInt32},Type{UInt64}}: type of header\noffsets::Vector{Int}: Offset of each field data in the compressed appended data \ndata::VTUData: Conatainer with  VTUData\ncompressed_dat::Bool : True if data is compressed\n\nExample\n\nset_uncompress_keywords(\"temperature\",\"points\")\nset_interpolation_keywords(\"temperature\")\nvtufile = VTUFile(\"./path-to-vtu/example.vtu\");\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#VTU-Keywords","page":"Library","title":"VTU Keywords","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"VTUFileHandler.VTUKeyWords\nset_uncompress_keywords\nadd_uncompress_keywords\nset_interpolation_keywords\nadd_interpolation_keywords","category":"page"},{"location":"lib/lib/#VTUFileHandler.VTUKeyWords","page":"Library","title":"VTUFileHandler.VTUKeyWords","text":"VTUKeyWords\n\nContainer for interpolation and uncompress keywords. Will be created as a module-global constant value vtukeywords.\n\nFields\n\ninterpolation_keywords::Vector{String} : Vector with names of VTU fields onto which the math operators should apply \nuncompress_keywords : Vector with names of VTU field that should be uncompressed and stored in memory\n\nStandard values\n\nBy default, keywords were set that match results of the simulation software OpenGeoSys. \n\ninterpolation_keywords = [\"displacement\",\"epsilon\",\"pressure_interpolated\",\"sigma\",\"temperature_interpolated\"]\nuncompress_keywords = [\"connectivity\",\"offsets\",\"bulk_node_ids\",\"bulk_element_ids\",\"Points\",\"MaterialIDs\"]\n\nExample\n\nIf a VTU result file e.g. owns a field named field1 to which the math operators should be applied, it can be added via: \n\nadd_interpolation_keywords([\"field1\"]])\n\n\n\n\n\n","category":"type"},{"location":"lib/lib/#VTUFileHandler.set_uncompress_keywords","page":"Library","title":"VTUFileHandler.set_uncompress_keywords","text":"set_uncompress_keywords(uk::Vector{String})\n\nSets all fields that should be accessible and therefore needs to be uncompressed \n\nArguments\n\nuk::Vector{String}: fieldnames\n\n\n\n\n\n","category":"function"},{"location":"lib/lib/#VTUFileHandler.add_uncompress_keywords","page":"Library","title":"VTUFileHandler.add_uncompress_keywords","text":"add_uncompress_keywords(uk::Vector{String})\n\nAdds fields that should be accessible and therefore needs to be uncompressed \n\nArguments\n\nuk::Vector{String}: fieldnames\n\n\n\n\n\n","category":"function"},{"location":"lib/lib/#VTUFileHandler.set_interpolation_keywords","page":"Library","title":"VTUFileHandler.set_interpolation_keywords","text":"set_interpolation_keywords(ik::Vector{String})\n\nSets all fields onto which the math operators should be applied\n\nArguments\n\nik::Vector{String}: fieldnames\n\n\n\n\n\n","category":"function"},{"location":"lib/lib/#VTUFileHandler.add_interpolation_keywords","page":"Library","title":"VTUFileHandler.add_interpolation_keywords","text":"add_interpolation_keywords(ik::Vector{String})\n\nAdds fields onto which the math operators should be applied\n\nArguments\n\nik::Vector{String}: fieldnames\n\n\n\n\n\n","category":"function"},{"location":"lib/lib/#Utils","page":"Library","title":"Utils","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"getindex(::VTUFile, ::String)\nVTUFileHandler.rename!\ndeepcopy(::VTUFile)\nsimilar(::VTUFile)\nfill!(::VTUFile, ::Float64)\nzero(::VTUFile)\none(::VTUFile)\nempty!(::VTUFile)\nempty(::VTUFile)","category":"page"},{"location":"lib/lib/#Base.getindex-Tuple{VTUFile, String}","page":"Library","title":"Base.getindex","text":"getindex(vtu::VTUFile, str::String)\n\nReturn the str-named data field of vtu. \n\nArguments\n\nvtu::VTUFile: VTU file\nstr::String: Name of data field\n\nExample\n\ndisplacementfield = vtu[\"displacement\"]\n\n\n\n\n\n","category":"method"},{"location":"lib/lib/#VTUFileHandler.rename!","page":"Library","title":"VTUFileHandler.rename!","text":"rename!(vtuf::VTUFile,name::String)\n\nRenames a VTUFile to name. This determines the write-location. \n\nArguments\n\nvtuf::VTUFile: VTU file\nname::String: Name, or write location, of vtu file \n\n\n\n\n\n","category":"function"},{"location":"lib/lib/#Base.deepcopy-Tuple{VTUFile}","page":"Library","title":"Base.deepcopy","text":"deepcopy(vtuf::VTUFile)\n\nDeepcopy of a VTUFile.  Only data that will be altered by algebraic operations is deepcopied at the moment due to efficiency.\n\nArguments\n\nvtuf::VTUFile: VTU file\n\n\n\n\n\n","category":"method"},{"location":"lib/lib/#Base.similar-Tuple{VTUFile}","page":"Library","title":"Base.similar","text":"similar(vtuf::VTUFile)\n\nCongruent to deepcopy.\n\nArguments\n\nvtuf::VTUFile: VTU file\n\n\n\n\n\n","category":"method"},{"location":"lib/lib/#Base.fill!-Tuple{VTUFile, Float64}","page":"Library","title":"Base.fill!","text":"fill(ret::VTUFile, c::Float64)\n\nFills all entries of all interpolation data fields with a constant value c::Float64.\n\nArguments\n\nret::VTUFile: VTU file\nc::Float64: Float all data is filled with\n\n\n\n\n\n","category":"method"},{"location":"lib/lib/#Base.zero-Tuple{VTUFile}","page":"Library","title":"Base.zero","text":"zero(vtu::VTUFile)\n\nShortcut for fill!(vtu,0.0).\n\nArguments\n\nvtu::VTUFile: VTU file\n\n\n\n\n\n","category":"method"},{"location":"lib/lib/#Base.one-Tuple{VTUFile}","page":"Library","title":"Base.one","text":"one(vtu::VTUFile)\n\nShortcut for fill!(vtu,1.0).\n\nArguments\n\nvtu::VTUFile: VTU file\n\n\n\n\n\n","category":"method"},{"location":"lib/lib/#Base.empty!-Tuple{VTUFile}","page":"Library","title":"Base.empty!","text":"empty(vtu::VTUFile)\n\nEmpties each data field in VTUData.\n\nArguments\n\nvtu::VTUFile: VTU file\n\n\n\n\n\n","category":"method"},{"location":"lib/lib/#Base.empty-Tuple{VTUFile}","page":"Library","title":"Base.empty","text":"empty(vtu::VTUFile)\n\nReturns a empty copy of vtu. \n\nArguments\n\nvtu::VTUFile: VTU file\n\n\n\n\n\n","category":"method"},{"location":"lib/lib/#IO-Functions","page":"Library","title":"IO-Functions","text":"","category":"section"},{"location":"lib/lib/","page":"Library","title":"Library","text":"write(::VTUFile, ::Bool)","category":"page"},{"location":"lib/lib/#Base.write-Tuple{VTUFile, Bool}","page":"Library","title":"Base.write","text":"write(vtufile::VTUFile,add_timestamp::Bool=true)\n\nWrites a VTUFile to destination vtufile.name\n\nArguments\n\nvtufile::VTUFile: VTU file\nadd_timestamp::Bool: adds a timestamp to vtufile.name if add_timestamp==true\n\n\n\n\n\n","category":"method"},{"location":"#VTUFileHandler.jl","page":"Home","title":"VTUFileHandler.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A VTU library in the Julia language that implements an algebra for basic mathematical operations on VTU data (link to GitHub repository).","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\", \"lib/lib.md\"]\nDepth = 2","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"With increasing computing resources, investigating uncertainties in simulation results is becoming an increasingly important factor. A discrete numerical simulation is computed several times with different deviations of the input parameters to produce different outputs of the same model to analyze those effects. The relevant stochastic or parametric output variables, such as mean, expected value, and variance, are often calculated and visualized only at selected individual points of the whole domain. This project aims to provide a simple way to perform stochastic/parametric post-processing of numerical simulations on entire domains using the VTK unstructured grid (VTU) file system and the Julia language as an example.","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"VTUFileHandler\")","category":"page"},{"location":"#Preliminaries","page":"Home","title":"Preliminaries","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The VTUFileHandler will eventually be used to perform stochastic post-processing on large VTU result files. Therefore, the following assumptions have to be fulfilled for the software to work correctly:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The VTU file must be in binary format and, in addition, can be Zlib compressed.\nOperators can only be applied to VTU files sharing the same topology. The user must ensure that this condition is met.\nThe data type of numerical fields of the VTU file, for which operators should be applied, have to be Float64.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The VTUFileHandler implements a basic VTU reader and writer through the functions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"function VTUFile(file::String) ... end \nfunction Base.write(vtu::VTUFile, add_timestamp=true) ... end","category":"page"},{"location":"","page":"Home","title":"Home","text":"By default, a timestamp is added if VTU files are written to disk not to overwrite existing files. Only data fields that are registered by the function ","category":"page"},{"location":"","page":"Home","title":"Home","text":"function set_uncompress_keywords(uk::Vector{String}) ... end","category":"page"},{"location":"","page":"Home","title":"Home","text":"before reading the VTU file are uncompressed and can be altered. For applying math operators onto a data field, the associated field has to be registered by the function ","category":"page"},{"location":"","page":"Home","title":"Home","text":"function set_interpolation_keywords(ik::Vector{String}) ... end","category":"page"},{"location":"","page":"Home","title":"Home","text":"The following math operators are implemented:","category":"page"},{"location":"","page":"Home","title":"Home","text":"+(::VTUFile, ::VTUFile),+(::VTUFile, ::Number),\n-(::VTUFile, ::VTUFile),-(::VTUFile, ::Number),\n*(::VTUFile, ::VTUFile),*(::VTUFile, ::Number),\n/(::VTUFile, ::VTUFile),/(::VTUFile, ::Number),\n^(::VTUFile, ::Number)","category":"page"},{"location":"","page":"Home","title":"Home","text":"In-place variations of the operators above are implemented as well.","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A three-dimensional cube with dimension (x,y,z) with 0<=x,y,z<=2 discretized by quadrilian elements with 27 points and 8 cells named vox8.vtu with a linear ramp in x-direction (f(x=0,y,z)=0, f(x=2,y,z)=0.8) as a result field termed xramp will be used as an example. The following set of instructions transform the result field from a linear ramp to a quadratic function in x-direction (displayed as a piecewise linear field due to the discretization):","category":"page"},{"location":"","page":"Home","title":"Home","text":"using VTUFileHandler\nset_uncompress_keywords([\"xRamp\"]) # uncrompress data field xramp\nset_interpolation_keywords([\"xRamp\"]) # apply math operators to xramp\nvtu = VTUFile(\"vox8.vtu\"); # read the vtu\nvtu += vtu/4; # [0.0,...,0.8] -> [0.0,...,1.0]\nvtu *= 4.0; # [0,...,1.0] -> [0.0,...,4.0]\nvtu -= 2.0; # [0,...,4.0] -> [-2.0,...,2.0]\nvtu ^= 2.0; # [-2.0,...,2.0] -> [4.0,...,0.0,...,4.0]\nrename!(vtu,\"vox8_1.vtu\")\nwrite(vtu)","category":"page"},{"location":"#Contributions,-report-bugs-and-support","page":"Home","title":"Contributions, report bugs and support","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions to or questions about this project are welcome. Feel free to create a issue or a pull request on GitHub.","category":"page"}]
}
